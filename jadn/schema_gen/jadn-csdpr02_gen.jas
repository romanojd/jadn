/*
module:        oasis-open.org/openc2/jadn/v1.0
patch:         0-csdpr02
title:         JADN Syntax
description:   Syntax of a JSON Abstract Data Notation (JADN) module.
exports:       Schema, Uname
*/

Schema ::= RECORD {    -- Definition of a JADN file
    meta         Meta,    -- Information about this schema module
    types        Type     -- Types defined in this schema module %{'max': 0}
}

Meta ::= MAP {    -- Meta-information about this schema
    module       [1] Uname,    -- Schema unique name/version
    patch        [2] STRING OPTIONAL,    -- Patch version
    title        [3] STRING OPTIONAL,    -- Title
    description  [4] STRING OPTIONAL,    -- Description
    imports      [5] Import OPTIONAL,    -- Imported schema modules %{'max': 0}
    exports      [6] Identifier OPTIONAL,    -- Data types exported by this module %{'max': 0}
    bounds       [7] Bounds OPTIONAL     -- Schema-wide upper bounds
}

Import ::= ARRAY {    -- Imported module id and unique name
    nsid         [1] Nsid,    -- A short local identifier (namespace id) used within this module to refer to the imported module
    uname        [2] Uname     -- Unique name of imported module
}

Bounds ::= ARRAY {    -- Schema-wide default upper bounds.  Overrides codec defaults, overridden by type definitions
    max_msg      [1] INTEGER,    -- Maximum serialized message size in octets or characters
    max_str      [2] INTEGER,    -- Maximum string length in characters
    max_bin      [3] INTEGER,    -- Maximum binary length in octets
    max_fields   [4] INTEGER     -- Maximum number of elements in ArrayOf
}

Type ::= ARRAY {
    tname        [1] Identifier,    -- Name of this datatype
    btype        [2] ENUMERATED.*,    -- Base type.  Enumerated value derived from list of JADN data types
    opts         [3] Options,    -- Type options
    desc         [4] STRING,    -- Description of this data type
    fields       [5] JADN-Type.&2 OPTIONAL     -- List of fields for compound types.  Not present for primitive types %{'max': 0}
}

JADN-Type ::= CHOICE {
    Binary       [1] NULL,    -- Octet (binary) string
    Boolean      [2] NULL,    -- True or False
    Integer      [3] NULL,    -- Whole number
    Number       [4] NULL,    -- Real number
    Null         [5] NULL,    -- Nothing
    String       [6] NULL,    -- Character (text) string
    Array        [7] FullField,    -- Ordered list of unnamed fields
    ArrayOf      [8] NULL,    -- Ordered list of fields of a specified type
    Choice       [9] FullField,    -- One of a set of named fields
    Enumerated   [10] EnumField,    -- One of a set of id:name pairs
    Map          [11] FullField,    -- Unordered set of named fields
    Record       [12] FullField     -- Ordered list of named fields
}

EnumField ::= ARRAY {    -- Item definition for Enumerated types
                 [1] INTEGER,    -- Item ID
                 [2] STRING,    -- Item name
                 [3] STRING     -- Item description
}

FullField ::= ARRAY {    -- Field definition for other compound types
                 [1] INTEGER,    -- Field ID or ordinal position
                 [2] Identifier,    -- Field name
                 [3] Identifier,    -- Field type
                 [4] Options,    -- Field options
                 [5] STRING     -- Field description
}

Identifier ::= STRING (Size (0..32)) (PATTERN ("^[a-zA-Z][\w-]*$"))    -- A string starting with an alpha char followed by zero or more alphanumeric / underscore / dash chars

Nsid ::= STRING (Size (1..8)) (PATTERN ("^[a-zA-Z][\w-]*$"))    -- Namespace ID - a short identifier

Uname ::= STRING (Size (1..100))    -- Unique name (e.g., of a schema) - typically a set of Identifiers separated by forward slashes

Options ::= ARRAY_OF(Option) (Size (0..10))    -- Options list may be empty but may not be omitted

Option ::= STRING (Size (1..100))    -- Option string: 1st char = option id
